# main.py
import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ Wildberries ---
def extract_nm_id(url: str) -> int:
    try:
        return int(url.split("/catalog/")[1].split("/")[0])
    except Exception:
        return None

def get_wb_reviews(nm_id: int, limit: int = 5):
    api_url = f"https://feedbacks.wb.ru/feedbacks/v1/product?nmId={nm_id}&limit={limit}&skip=0"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }

    try:
        response = requests.get(api_url, headers=headers, timeout=5)  # –¥–æ–±–∞–≤–∏–ª–∏ timeout
        response.raise_for_status()  # –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API: {e}")
        return []

    try:
        data = response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return []

    reviews = []
    for item in data.get("feedbacks", []):
        reviews.append({
            "text": item.get("text"),
            "rating": item.get("productValuation"),
            "date": item.get("createdDate"),
            "likes": item.get("likeCount", 0),
            "dislikes": item.get("dislikeCount", 0)
        })

    return reviews

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π."
    )

@dp.message_handler()
async def handle_link(message: Message):
    url = message.text.strip()

    if "wildberries.ru/catalog/" not in url:
        await message.reply("‚ùóÔ∏è–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries.")
        return

    await message.reply("üîç –ò—â—É –æ—Ç–∑—ã–≤—ã...")

    nm_id = extract_nm_id(url)
    if not nm_id:
        await message.reply("‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")
        return

    reviews = get_wb_reviews(nm_id)
    if not reviews:
        await message.reply("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã. –í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–æ–≤–∞—Ä–∞ –∏—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    reply_text = "üìù –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for r in reviews:
        reply_text += f"‚≠êÔ∏è {r['rating']} | {r['date'][:10]}\n{r['text'][:200]}...\n\n"

    await message.reply(reply_text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
